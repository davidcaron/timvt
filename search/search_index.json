{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Work In Progress A lightweight PostGIS based dynamic vector tile server. Documentation : developmentseed.org/timvt/ Source Code : developmentseed/timvt TiMVT , pronounced tee-MVT , is lightweight service, which sole goal is to create Vector Tiles dynamically from PostGIS . Built on top of the modern and fast FastAPI framework, titiler is written in Python using async/await asynchronous code to improve the performances and handle heavy loads. timvt is mostly inspired from the awesome urbica/martin and CrunchyData projects. Features \u00b6 Multiple TileMatrixSets via morecantile . Default is set to WebMercatorQuad which is the usual Web Mercator projection used in most of Wep Map libraries.) Built with FastAPI Async API Requirements and Setup \u00b6 Python Requirements \u00b6 FastAPI : Modern, fast (high-performance), web framework for building APIs Morecantile (Rasterio/GDAL): Construct and use map tile grids (a.k.a TileMatrixSet / TMS) asyncpg A fast PostgreSQL Database Client Library for Python/asyncio PostGIS/Postgres \u00b6 timvt rely mostly on ST_AsMVT function and will need PostGIS >= 2.5. If you want more info about ST_AsMVT function or on the subject of creating Vector Tile from PostGIS, please read this great article from Paul Ramsey: info.crunchydata.com/blog/dynamic-vector-tiles-from-postgis Setup locally \u00b6 Download $ git clone https://github.com/developmentseed/timvt.git && cd timvt Install # Install timvt dependencies and Uvicorn (a lightning-fast ASGI server) $ pip install -e . Configuration To be able to create Vector Tile, the application will need access to the PostGIS database. timvt uses starlette 's configuration pattern which make use of environment variable and/or .env file to pass variable to the application. Example of .env file can be found in .env.example POSTGRES_USER=username POSTGRES_PASS=password POSTGRES_DBNAME=postgis POSTGRES_HOST=0.0.0.0 POSTGRES_PORT=5432 # Or you can also define the DATABASE_URL directly DATABASE_URL=postgresql://username:password@0.0.0.0:5432/postgis Launch $ uvicorn timvt.app:app --reload With Docker \u00b6 Using Docker is maybe the easiest approach, and with docker-compose it's even easier to setup the database and the application using only one command line. $ git clone https://github.com/developmentseed/timvt.git $ docker-compose up --build Documentation \u00b6 :endpoint:/docs Project structure \u00b6 demo/ - Leaflet/Mapbox demo \u2502 Dockerfiles/ - Dockerfiles. \u251c\u2500\u2500 app/ \u2502 \u2514\u2500\u2500 Dockerfile - timvt Application dockerfile (python:3.8-slim). \u251c\u2500\u2500 db/ \u2502 \u251c\u2500\u2500 countries.sql - Natural Earth test dataset. \u2502 \u2514\u2500\u2500 Dockerfile - PostGIS dockerfile (postgis/postgis:12-3.0). \u2502 tests/ - timvt Python Unitest suite. \u2502 timvt/ - Python module. \u251c\u2500\u2500 endpoints/ - Application routes. \u2502 \u251c\u2500\u2500 demo.py - Demo web pages. \u2502 \u251c\u2500\u2500 factory.py - Tile endpoints factory. \u2502 \u251c\u2500\u2500 health.py - Health check endpoint. \u2502 \u251c\u2500\u2500 index.py - Table metadata and list. \u2502 \u251c\u2500\u2500 tiles.py - Tile related endpoints. \u2502 \u2514\u2500\u2500 tms.py - TileMatrixSet list and metadata. \u2502 \u251c\u2500\u2500 custom/ - Custom TMS grids. \u251c\u2500\u2500 db/ - Db related tools. \u251c\u2500\u2500 models/ - Pydantic models for this application. \u251c\u2500\u2500 resources/ - Application resources (enums, responses, ...). \u251c\u2500\u2500 templates/ - Factory and html templates. \u251c\u2500\u2500 utils.py - Application utility functions. \u251c\u2500\u2500 app.py - FastAPI application creation and configuration. \u251c\u2500\u2500 setting.py - Application configuration. \u2514\u2500\u2500 errors.py - Application custom errors. Contribution & Development \u00b6 See CONTRIBUTING.md License \u00b6 See LICENSE Authors \u00b6 Created by Development Seed Changes \u00b6 See CHANGES.md .","title":"TiMVT"},{"location":"#features","text":"Multiple TileMatrixSets via morecantile . Default is set to WebMercatorQuad which is the usual Web Mercator projection used in most of Wep Map libraries.) Built with FastAPI Async API","title":"Features"},{"location":"#requirements-and-setup","text":"","title":"Requirements and Setup"},{"location":"#python-requirements","text":"FastAPI : Modern, fast (high-performance), web framework for building APIs Morecantile (Rasterio/GDAL): Construct and use map tile grids (a.k.a TileMatrixSet / TMS) asyncpg A fast PostgreSQL Database Client Library for Python/asyncio","title":"Python Requirements"},{"location":"#postgispostgres","text":"timvt rely mostly on ST_AsMVT function and will need PostGIS >= 2.5. If you want more info about ST_AsMVT function or on the subject of creating Vector Tile from PostGIS, please read this great article from Paul Ramsey: info.crunchydata.com/blog/dynamic-vector-tiles-from-postgis","title":"PostGIS/Postgres"},{"location":"#setup-locally","text":"Download $ git clone https://github.com/developmentseed/timvt.git && cd timvt Install # Install timvt dependencies and Uvicorn (a lightning-fast ASGI server) $ pip install -e . Configuration To be able to create Vector Tile, the application will need access to the PostGIS database. timvt uses starlette 's configuration pattern which make use of environment variable and/or .env file to pass variable to the application. Example of .env file can be found in .env.example POSTGRES_USER=username POSTGRES_PASS=password POSTGRES_DBNAME=postgis POSTGRES_HOST=0.0.0.0 POSTGRES_PORT=5432 # Or you can also define the DATABASE_URL directly DATABASE_URL=postgresql://username:password@0.0.0.0:5432/postgis Launch $ uvicorn timvt.app:app --reload","title":"Setup locally"},{"location":"#with-docker","text":"Using Docker is maybe the easiest approach, and with docker-compose it's even easier to setup the database and the application using only one command line. $ git clone https://github.com/developmentseed/timvt.git $ docker-compose up --build","title":"With Docker"},{"location":"#documentation","text":":endpoint:/docs","title":"Documentation"},{"location":"#project-structure","text":"demo/ - Leaflet/Mapbox demo \u2502 Dockerfiles/ - Dockerfiles. \u251c\u2500\u2500 app/ \u2502 \u2514\u2500\u2500 Dockerfile - timvt Application dockerfile (python:3.8-slim). \u251c\u2500\u2500 db/ \u2502 \u251c\u2500\u2500 countries.sql - Natural Earth test dataset. \u2502 \u2514\u2500\u2500 Dockerfile - PostGIS dockerfile (postgis/postgis:12-3.0). \u2502 tests/ - timvt Python Unitest suite. \u2502 timvt/ - Python module. \u251c\u2500\u2500 endpoints/ - Application routes. \u2502 \u251c\u2500\u2500 demo.py - Demo web pages. \u2502 \u251c\u2500\u2500 factory.py - Tile endpoints factory. \u2502 \u251c\u2500\u2500 health.py - Health check endpoint. \u2502 \u251c\u2500\u2500 index.py - Table metadata and list. \u2502 \u251c\u2500\u2500 tiles.py - Tile related endpoints. \u2502 \u2514\u2500\u2500 tms.py - TileMatrixSet list and metadata. \u2502 \u251c\u2500\u2500 custom/ - Custom TMS grids. \u251c\u2500\u2500 db/ - Db related tools. \u251c\u2500\u2500 models/ - Pydantic models for this application. \u251c\u2500\u2500 resources/ - Application resources (enums, responses, ...). \u251c\u2500\u2500 templates/ - Factory and html templates. \u251c\u2500\u2500 utils.py - Application utility functions. \u251c\u2500\u2500 app.py - FastAPI application creation and configuration. \u251c\u2500\u2500 setting.py - Application configuration. \u2514\u2500\u2500 errors.py - Application custom errors.","title":"Project structure"},{"location":"#contribution-development","text":"See CONTRIBUTING.md","title":"Contribution &amp; Development"},{"location":"#license","text":"See LICENSE","title":"License"},{"location":"#authors","text":"Created by Development Seed","title":"Authors"},{"location":"#changes","text":"See CHANGES.md .","title":"Changes"},{"location":"contributing/","text":"Development - Contributing \u00b6 Issues and pull requests are more than welcome: github.com/developmentseed/timvt/issues dev install $ git clone https://github.com/developmentseed/timvt.git $ cd titiler $ pip install -e . [ dev ] Python3.7 only This repo is set to use pre-commit to run isort , flake8 , pydocstring , black (\"uncompromising Python code formatter\") and mypy when committing new code. $ pre-commit install Docs \u00b6 $ git clone https://github.com/developmentseed/timvt.git $ cd titiler $ pip install -e . [ \"docs\" ] Hot-reloading docs: $ mkdocs serve To manually deploy docs (note you should never need to do this because Github Actions deploys automatically for new commits.): $ mkdocs gh-deploy","title":"Development - Contributing"},{"location":"contributing/#development-contributing","text":"Issues and pull requests are more than welcome: github.com/developmentseed/timvt/issues dev install $ git clone https://github.com/developmentseed/timvt.git $ cd titiler $ pip install -e . [ dev ] Python3.7 only This repo is set to use pre-commit to run isort , flake8 , pydocstring , black (\"uncompromising Python code formatter\") and mypy when committing new code. $ pre-commit install","title":"Development - Contributing"},{"location":"contributing/#docs","text":"$ git clone https://github.com/developmentseed/timvt.git $ cd titiler $ pip install -e . [ \"docs\" ] Hot-reloading docs: $ mkdocs serve To manually deploy docs (note you should never need to do this because Github Actions deploys automatically for new commits.): $ mkdocs gh-deploy","title":"Docs"},{"location":"release-notes/","text":"Release Notes \u00b6 0.1.0 (TBD) \u00b6 Initial release","title":"Release Notes"},{"location":"release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"release-notes/#010-tbd","text":"Initial release","title":"0.1.0 (TBD)"}]}